{--
res :: Value
res =  object [
  "ok" .= True,
  "result" .= [
      object [
      "updateId" .= (58414203::Int),
      "message" .= object [
        "messageId" .= (8::Int),
        "from" .= object [
          "id" .=  (433218230::Int),
          "is_bot" .= False,
          "first_name" .= ("Roman"::String),
          "language_code" .= ("ru":: String)
          ],
        "chat" .= object [
          "id" .=  (433218230::Int),
          "first_name" .= ("Roman"::String),
          "type" .= ("private"::String)
          ],
        "date" .= (1605254269::Int),
        "text" .= ("hello botyara"::String)
        ]
      ]
    ]
  ]



val :: Value
val =  object [
  "ok" .= True,
  "result" .= [1,2,3::Int],
  "result" .= ("res"::String),
  "numbers1" .= ([]::[Int])
  ]

  --тестовый объект
--obj:: Object
--obj = fromList [("result", Array [Object (fromList [("text", "приввет")]) ]]
--obj = fromList [("result", "test")]

--arr:: Value
--arr = Vector [2,3,5]

val1 :: Value
val1 = Object $ fromList [
  ("numbers", Array $ fromList [Number 1, Number 2, Number 3]),
  ("boolean", Bool True),
  ("numbers0", Array $ fromList [])
  ]




str :: Value 
str = String "text"

n :: Value 
n = Number 1000

b:: Value 
b= Bool True 

null:: Value 
null= Null 

parseStatus :: Value -> EE Bool
parseStatus v = parseEE v $ \o -> do
  status <- o .:"ok"
  return status




data GUFrom = GUFrom
  { uid :: Int
    , isBot :: Bool
    , firstName :: T.Text
    , languageCode::T.Text
    } deriving (Show, Generic)

instance FromJSON GUFrom where
  parseJSON (Object v) = do
    GUFrom  <$> v .: "ok"
            <*> v .: "is_bot"
            <*> v .: "first_name"
            <*> v .: "language_code"

instance ToJSON GUFrom where
  toJSON (GUFrom uid isBot firstName languageCode) =
    object [ "id" .= uid
      , "is_bot" .= isBot
      , "first_name" .= firstName
      , "language_code" .= languageCode
    ]

rawJSON :: LC.ByteString
rawJSON = "{\"id\":8888,\"is_bot\":false,\"first_name\":\"Bodavsky\",\"language_code\":\"ru\"}"

myGUFrom :: GUFrom
myGUFrom = GUFrom {uid=666
  , isBot = False
  , firstName= "Bodavskiy"
  , languageCode = "ru" 
  }

--Ошибки возникают если компилятор не понимает, какой тип я от него  хочу 
--в этом случае тип указать явно
--Main> eitherDecode (encode myGUFrom)
--Left "Error in $: parsing () failed, expected Array, but encountered Object"
--Main> eitherDecode (encode myGUFrom) :: Either String  GUFrom
--Right (GUFrom {uid = 666, isBot = False, firstName = "Bodavskiy", languageCode = "ru"}) 
--}